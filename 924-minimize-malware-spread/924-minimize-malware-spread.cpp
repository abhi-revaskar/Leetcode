class Solution {
public:
    int dfs(int i,vector<int> &vis,vector<int> &color,int curr_clr,vector<vector<int>>& g)
    {
        vis[i] = 1;
        color[i] = curr_clr;
        int ans = 1;
        for(int v = 0;v<g.size();v++)
            if(!vis[v] && g[i][v])
                ans+=dfs(v,vis,color,curr_clr,g);
        return ans;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(),initial.end());
        int n = graph.size(),curr_clr=0,node = initial[0],max_comp_size=0;
        vector<int> vis(n,0),color(n),size(n);
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                size[curr_clr] = dfs(i,vis,color,curr_clr,graph);
                curr_clr++;
            }
        }
        for(int i=0;i<n;i++)
        {
            // cout<<color[i]<<" "<<size[color[i]]<<endl;
        }
        vector<int> comp_nodes(n,0);
        for(auto x:initial)
            comp_nodes[color[x]]++;
        for(auto x:initial)
        {
            if(comp_nodes[color[x]]==1 && size[color[x]]>max_comp_size)
            {
                node = x;
                max_comp_size = size[color[x]];
            }
        }
        return node;
    }
};